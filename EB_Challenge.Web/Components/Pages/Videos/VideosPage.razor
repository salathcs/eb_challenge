@page "/videos"
@using Microsoft.AspNetCore.SignalR.Client
@inject IConfiguration configuration
@inject DomainApiClient client
@rendermode InteractiveServer

<PageTitle>Videos</PageTitle>

<h1>Videos</h1>

<div class="row">
    <div class="col-6">
        <div>
            <label for="width">Width:</label>
            <input id="width" @bind="Width" type="number" min="1" max="500" step="1" />px
        </div>

        <div>
            <label for="height">Height:</label>
            <input id="height" @bind="Height" type="number" min="1" max="500" step="10" />px
        </div>

        <div>
            <label for="height">Video:</label>
            <input id="video" @bind="Video" type="text" />
        </div>

        <div>
            <button id="add" type="button" class="btn btn-primary" @onclick="AddVideo">Add</button>
            <button id="reset" type="button" class="btn btn-secondary" @onclick="ResetVideos">Reset</button>
        </div>
    </div>
</div>

<br />

@if (VideoDatas is null || !VideoDatas.Any())
{
    <h6>No video added yet</h6>
}
else
{
    <div class="row">
        @foreach (var videoData in VideoDatas)
        { 
            <div class="col-4">
                <VideoComponent Height="@videoData.Height" Width="@videoData.Width" Video="@videoData.Video" />
            </div>
        }
    </div>
}

@code {
    private HubConnection hubConnection = null!;

    private int Width { get; set; } = 300;
    private int Height { get; set; } = 200;
    private string Video { get; set; } = "myVideo.mp4";

    private List<VideoData> VideoDatas = null!;

    protected override async Task OnInitializedAsync()
    {
        var fetchedData = await client.GetVideos();
        VideoDatas = fetchedData.ToList();

        hubConnection = new HubConnectionBuilder()
            .WithUrl($"{configuration.GetValue<string>("signalrservice")}/videoshub")
            .Build();

        hubConnection.On<int, int, string>("SyncAddVideo", async (width, height, video) =>
        {
            VideoDatas.Add(new VideoData(width, height, video));

            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On("SyncResetVideos", async () =>
        {
            VideoDatas.Clear();

            await InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task AddVideo()
    {
        await client.AddVideo([.. VideoDatas, new VideoData(Width, Height, Video)]);

        await hubConnection.SendAsync("AddVideo", Width, Height, Video);
    }

    private async Task ResetVideos()
    {
        await client.ResetVideos();

        await hubConnection.SendAsync("ResetVideos");
    }

    public void Dispose() => hubConnection.DisposeAsync();
}
